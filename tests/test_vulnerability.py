import pytest
import sys
import uuid
import yaml

# Notes:
# `capfd` will intercept the terminal output streams for this process and all
# subprocesses. We check to see if the exploit fired by collecting this terminal
# output and checking to see if it matches the `check` text below. If it matches,
# that means the exploit fired and the test will fail.

check = f"EXPLOIT!-{str(uuid.uuid4())}"
basic = f"!!python/object/new:os.system [echo {check}]"

# cf. https://blog.ankursundara.com/pyyaml-cve/
cve_2020_14343 = f"""!!python/object/new:tuple 
- !!python/object/new:map 
  - !!python/name:eval
  - [ "__import__('os').system('echo {check}')" ]"""

# cf. https://gist.github.com/adamczi/23a3b6d4bb7b2be35e79b0667d6682e1
cve_2020_1747 = f"""
- !!python/object/new:yaml.MappingNode
  listitems: !!str '!!python/object/apply:subprocess.Popen [["echo", "{check}"]]'
  state:
    tag: !!str dummy
    value: !!str dummy
    extend: !!python/name:yaml.unsafe_load"""

# cf. https://medium.com/@tristanfarkas/rowboat-and-cve-2017-18342-1c2e2b21c0c4
cve_2017_18342 = f"""
commands:
  prefix: !!python/object/apply:os.system ["echo '{check}'"]"""

@pytest.mark.parametrize(
    "function",
    ["load", "unsafe_load", "full_load", "safe_load"]
)
@pytest.mark.parametrize(
    "exploit",
    [basic, cve_2020_1747, cve_2020_14343, cve_2017_18342],
    ids=["basic", "cve_2020_1747", "cve_2020_14343", "cve_2017_18342"],
)
def test_vulnerability_load_functions(capfd, function, exploit):
    print(yaml.__version__, file=sys.stderr)
    try:
        f = getattr(yaml, function)
    except AttributeError:
        pytest.skip(f"Attribute '{function}' is unavailable in this version. Skipping")
    try:
        f(exploit)
    except yaml.constructor.ConstructorError:
        pass
    except TypeError:
        pytest.skip(f"The API for '{function}' has changed. Skipping")
    terminal_output = capfd.readouterr()
    actual = terminal_output.out.strip()
    assert actual != check


@pytest.mark.parametrize(
    "loader",
    ["Loader", "UnsafeLoader", "FullLoader", "SafeLoader", "BaseLoader", "CLoader", "CFullLoader", "CSafeLoader", "CBaseLoader"]
)
@pytest.mark.parametrize(
    "exploit",
    [basic, cve_2020_1747, cve_2020_14343, cve_2017_18342],
    ids=["basic", "cve_2020_1747", "cve_2020_14343", "cve_2017_18342"],
)
def test_vulnerability_loaders(capfd, loader, exploit):
    print(yaml.__version__, file=sys.stderr)
    try:
        l = getattr(yaml, loader)
    except AttributeError:
        pytest.skip(f"Attribute '{loader}' is unavailable in this version. Skipping")
    try:
        yaml.load(exploit, Loader=l)
    except yaml.constructor.ConstructorError:
        pass
    terminal_output = capfd.readouterr()
    actual = terminal_output.out.strip()
    assert actual != check